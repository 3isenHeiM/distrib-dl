#!/bin/bash
# Download and verify Linux distribution installers/ISO images
# https://github.com/nodiscc/distrib-dl

set -o errexit
set -o nounset
set -o pipefail
usage="$0 DISTRIBUTION1 [DISTRIBUTION2 DISTRIBUTION3 ...]"

##############################
# Configuration

### DEBIAN
# one of: amd64-i386 amd64 armel armhf i386 ia64 kfreebsd-amd64 kfreebsd-i386 mips mipsel multi-arch powerpc s390 s390x source sparc
debian_architecture="amd64-i386"
debian_version="9.7.0"
### TAILS
tails_architecture="amd64"
tails_version="3.11"
### KALI
kali_architecture="amd64"
kali_version="2018.2"
### CENTOS
centos_version_major="7"
centos_version_minor="1804"
### PROXMOX
proxmox_version="5.2-1"
### PFSENSE
pfsense_version="2.4.4"
pfsense_installer_type="vga" #serial or vga

############################

set -e
cli="0"
download_dir="$PWD"
usage="$0 DISTRIBUTION1 [DISTRIBUTION2 DISTRIBUTION3 ...]
Available distributions: debian centos tails kali proxmox pfsense"

############################

function download_debian() {
	# Official netinstall image without firmwares (disabled)
	#debian_base_url="https://cdimage.debian.org/debian-cd/current/${architecture}/iso-cd/"
	#debian_iso_filename="debian-${debian_version}-${architecture}-netinst.iso"
	# Unofficial image including firmwares	
	debian_base_url="https://cdimage.debian.org/cdimage/unofficial/non-free/cd-including-firmware/current/multi-arch/iso-cd/"
	debian_iso_filename="firmware-${debian_version}-${debian_architecture}-netinst.iso"
	debian_sums_url="${debian_base_url}/SHA512SUMS"
	debian_sums_sign_url="${debian_base_url}/SHA512SUMS.sign"
	if [[ ! -d "$download_dir/debian/" ]]; then mkdir -p "$download_dir/debian/"; fi
	echo "Downloading Debian checksums and signature..."
	wget -N -nv --show-progress -P "$download_dir/debian/" "$debian_sums_url"
	wget -N -nv --show-progress -P "$download_dir/debian/" "$debian_sums_sign_url"
	echo "Verifying Debian signature..."
	gpg --verify "$download_dir/debian/SHA512SUMS.sign" "$download_dir/debian/SHA512SUMS"
	echo "Downloading Debian ISO image..."
	wget --continue -N -nv --show-progress -P "$download_dir/debian/" "$debian_base_url/$debian_iso_filename"
	echo "Verifying Debian ISO image integrity..."
	cd "$download_dir/debian/" && sha512sum -c <(cat SHA512SUMS) && cd -
}

function download_centos() {
	# fingerprint: 6341 AB27 53D7 8A78 A7C2  7BB1 24C6 A8A7 F4A8 0EB5
	centos_base_url="https://ftp.osuosl.org/pub/centos/${centos_version_major}/isos/x86_64/"
	centos_iso_filename="CentOS-${centos_version_major}-x86_64-Minimal-${centos_version_minor}.iso"
	centos_iso_url="${centos_base_url}/${centos_iso_filename}"
	#centos_iso_url="${centos_base_url}/CentOS-7-live-GNOME-x86_64.iso" #Alternative live image w/ GNOME desktop, disabled
	centos_key_url="https://www.centos.org/keys/RPM-GPG-KEY-CentOS-${centos_version_major}"
	centos_sums_sign_url="${centos_base_url}/sha256sum.txt.asc"
	centos_sums_url="${centos_base_url}/sha256sum.txt"
	if [[ ! -d "$download_dir/centos/" ]]; then mkdir -p "$download_dir/centos/"; fi
	echo "Downloading CentOS keys, cheksums and signature..."
	wget --continue -N -nv --show-progress -P "$download_dir/centos/" "$centos_key_url"
	wget --continue -N -nv --show-progress -P "$download_dir/centos/" "$centos_sums_url"
	wget --continue -N -nv --show-progress -P "$download_dir/centos/" "$centos_sums_sign_url"
	echo "Importing CentOS GPG key..."
	gpg --import "$download_dir/centos/RPM-GPG-KEY-CentOS-${centos_version_major}"
	echo "Downloading CentOS ISO image..."
	wget --continue -N -nv --show-progress -P "$download_dir/centos/" "$centos_iso_url"
	cd "$download_dir/centos/"
	echo "Verifying CentOS signature..."
	gpg --verify < sha256sum.txt.asc
	echo "Verifying CentOS ISO image integrity..."
	sha256sum -c <(grep "$centos_iso_filename" sha256sum.txt)
	cd -
}

function download_tails() {
	if [[ ! -d "$download_dir/tails/" ]]; then mkdir -p "$download_dir/tails/"; fi
	tails_iso_url="https://dl.amnesia.boum.org/tails/stable/tails-${tails_architecture}-${tails_version}/tails-${tails_architecture}-${tails_version}.iso"
	tails_key_url="https://tails.boum.org/tails-signing.key"
	tails_sig_url="https://tails.boum.org/torrents/files/tails-${tails_architecture}-${tails_version}.iso.sig"
	echo "downloading Tails key and signature..."
	wget --continue -N -nv --show-progress -P "$download_dir/tails/" "$tails_key_url"
	wget --continue -N -nv --show-progress -P "$download_dir/tails/" "$tails_sig_url"
	echo "Importing tails GPG key..."
	gpg --import "$download_dir/tails/tails-signing.key"
	echo "downloading Tails ISO image"
	#Force HTTPS but ignore certificate checks since Tails CDN can point to other servers than dl.amnesia.boum.org
	wget --continue --no-check-certificate -N -nv --show-progress -P "$download_dir/tails/" "$tails_iso_url"
	echo "verifying Tails signature..."
	tails_sig_filename="tails-${tails_architecture}-${tails_version}.iso.sig"
	tails_iso_filename="tails-${tails_architecture}-${tails_version}.iso"
	gpg --keyid-format 0xlong --verify "$download_dir/tails/$tails_sig_filename" "$download_dir/tails/$tails_iso_filename"
}

function download_kali() {
	kali_base_url="https://cdimage.kali.org/kali-$kali_version/"
	kali_iso_filename="kali-linux-$kali_version-$kali_architecture.iso"
	kali_key_url="https://www.kali.org/archive-key.asc"
	if [[ ! -d "$download_dir/kali/" ]]; then mkdir -p "$download_dir/kali/"; fi
	echo "Downloading Kali checksums, key and signature..."
	wget --continue -N -nv --show-progress -P "$download_dir/kali/" "$kali_base_url/SHA256SUMS"
	wget --continue -Nv --show-progress -O "$download_dir/kali/SHA256SUMS.gpg" "$kali_base_url/SHA256SUMS.gpg"
	wget --continue -N -nv --show-progress -P "$download_dir/kali/" "$kali_key_url"
	echo "Importing Kali GPG key..."
	gpg --import "$download_dir/kali/archive-key.asc"
	echo "Verifying Kali signature..."
	gpg --verify "$download_dir/kali/SHA256SUMS.gpg" "$download_dir/kali/SHA256SUMS"
	echo "Downloading Kali ISO image..."
	wget --continue -N -nv --show-progress -P "$download_dir/kali/" "$kali_base_url/$kali_iso_filename"
	echo "Verifying Kali ISO image integrity..."
	cd "$download_dir/kali/" && sha256sum -c <(grep "$kali_iso_filename" SHA256SUMS) && cd -
}

function download_proxmox {
    # No list of available ISOs https://forum.proxmox.com/threads/wget-pmg-iso.42113/
    # https://www.proxmox.com/en/downloads/category/iso-images-pve
    # TODO checksums/gpg verify download
	if [[ ! -d "$download_dir/kali/" ]]; then mkdir -p "$download_dir/kali/"; fi
    proxmox_base_url="https://www.proxmox.com/images/download/pve/iso/"
    wget --continue -N -nv --show-progress -P "$download_dir/proxmox/" "$proxmox_base_url/proxmox-ve_$proxmox_version.iso"
}

function download_pfsense {
    # TODO add other architectures (currently only amd64 supported)
	# New York mirror (disabled)
	#pfsense_base_url="https://nyifiles.pfsense.org/mirror/downloads"
	# Frankfurt mirror (disabled)
	#pfsense_base_url="https://frafiles.pfsense.org/mirror/downloads"
	# Main site
	pfsense_base_url="https://files.pfsense.org/mirror/downloads"
	if [[ "$pfsense_installer_type" == "serial" ]]; then pfsense_is_serial="serial-"
	    elif [[ "$pfsense_installer_type" == "vga" ]]; then pfsense_is_serial=""
	    else echo "[distrib-dl] ERROR: invalid installer type for pfsense: $pfsense_installer_type"; exit 1
	fi
	pfsense_iso_filename="pfSense-CE-memstick-${pfsense_is_serial}${pfsense_version}-RELEASE-amd64.img.gz"
	pfsense_hashes_base_url="https://files.pfsense.org/hashes/"
	if [[ ! -d "$download_dir/pfsense/" ]]; then mkdir -p "$download_dir/pfsense/"; fi
	echo "[distrib-dl] INFO: downloading pfsense checksums..."
	wget --continue -N -nv --show-progress -P "$download_dir/pfsense/" "${pfsense_hashes_base_url}/${pfsense_iso_filename}.sha256"
    echo "[distrib-dl] INFO: downloading pfsense ISO image..."
	wget --continue -N -nv --show-progress -P "$download_dir/pfsense/" "${pfsense_base_url}/${pfsense_iso_filename}"
    echo "[distrib-dl] INFO: verifying pfsense ISO image integrity..."
	cd "$download_dir/pfsense" && sha256sum --check "pfSense-CE-memstick-${pfsense_is_serial}${pfsense_version}-RELEASE-amd64.img.gz.sha256"
}

function _main() {
	if [[ "$@" =~ "debian" ]] ; then download_debian; cli="1"; fi
	if [[ "$@" =~ "centos" ]] ; then download_centos; cli="1"; fi
	if [[ "$@" =~ "tails" ]] ; then download_tails; cli="1"; fi
	if [[ "$@" =~ "kali" ]] ; then download_kali; cli="1"; fi
	if [[ "$@" =~ "proxmox" ]] ; then download_proxmox; cli="1"; fi
	if [[ "$@" =~ "pfsense" ]] ; then download_pfsense; cli="1"; fi
	if [[ ! "$cli" = "1" ]]; then echo "Usage: $usage"; exit 1; fi
}

#####################

_main "$@"
